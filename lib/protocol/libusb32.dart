// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

import 'dart:ffi' as ffi;

/// Bindings to `libusb.h`.
class Libusb {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Libusb(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Libusb.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int libusbInit(
    ffi.Pointer<ffi.Pointer<LibusbContext>> ctx,
  ) {
    return _libusbInit(
      ctx,
    );
  }

  late final _libusbInitPtr =
      _lookup<ffi.NativeFunction<_CLibusbInit>>('libusb_init');
  late final _DartLibusbInit _libusbInit =
      _libusbInitPtr.asFunction<_DartLibusbInit>();

  void libusbExit(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbExit(
      ctx,
    );
  }

  late final _libusbExitPtr =
      _lookup<ffi.NativeFunction<_CLibusbExit>>('libusb_exit');
  late final _DartLibusbExit _libusbExit =
      _libusbExitPtr.asFunction<_DartLibusbExit>();

  void libusbSetDebug(
    ffi.Pointer<LibusbContext> ctx,
    int level,
  ) {
    return _libusbSetDebug(
      ctx,
      level,
    );
  }

  late final _libusbSetDebugPtr =
      _lookup<ffi.NativeFunction<_CLibusbSetDebug>>('libusb_set_debug');
  late final _DartLibusbSetDebug _libusbSetDebug =
      _libusbSetDebugPtr.asFunction<_DartLibusbSetDebug>();

  void libusbSetLogCb(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<ffi.NativeFunction<LibusbLogCb>> cb,
    int mode,
  ) {
    return _libusbSetLogCb(
      ctx,
      cb,
      mode,
    );
  }

  late final _libusbSetLogCbPtr =
      _lookup<ffi.NativeFunction<_CLibusbSetLogCb>>('libusb_set_log_cb');
  late final _DartLibusbSetLogCb _libusbSetLogCb =
      _libusbSetLogCbPtr.asFunction<_DartLibusbSetLogCb>();

  ffi.Pointer<LibusbVersion> libusbGetVersion() {
    return _libusbGetVersion();
  }

  late final _libusbGetVersionPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetVersion>>('libusb_get_version');
  late final _DartLibusbGetVersion _libusbGetVersion =
      _libusbGetVersionPtr.asFunction<_DartLibusbGetVersion>();

  int libusbHasCapability(
    int capability,
  ) {
    return _libusbHasCapability(
      capability,
    );
  }

  late final _libusbHasCapabilityPtr =
      _lookup<ffi.NativeFunction<_CLibusbHasCapability>>(
          'libusb_has_capability');
  late final _DartLibusbHasCapability _libusbHasCapability =
      _libusbHasCapabilityPtr.asFunction<_DartLibusbHasCapability>();

  ffi.Pointer<ffi.Int8> libusbErrorName(
    int errcode,
  ) {
    return _libusbErrorName(
      errcode,
    );
  }

  late final _libusbErrorNamePtr =
      _lookup<ffi.NativeFunction<_CLibusbErrorName>>('libusb_error_name');
  late final _DartLibusbErrorName _libusbErrorName =
      _libusbErrorNamePtr.asFunction<_DartLibusbErrorName>();

  int libusbSetLocale(
    ffi.Pointer<ffi.Int8> locale,
  ) {
    return _libusbSetLocale(
      locale,
    );
  }

  late final _libusbSetLocalePtr =
      _lookup<ffi.NativeFunction<_CLibusbSetLocale>>('libusb_setlocale');
  late final _DartLibusbSetLocale _libusbSetLocale =
      _libusbSetLocalePtr.asFunction<_DartLibusbSetLocale>();

  ffi.Pointer<ffi.Int8> libusbStrError(
    int errcode,
  ) {
    return _libusbStrerror(
      errcode,
    );
  }

  late final _libusbStrerrorPtr =
      _lookup<ffi.NativeFunction<_CLibusbStrerror>>('libusb_strerror');
  late final _DartLibusbStrerror _libusbStrerror =
      _libusbStrerrorPtr.asFunction<_DartLibusbStrerror>();

  int libusbGetDeviceList(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<LibusbDevice>>> list,
  ) {
    return _libusbGetDeviceList(
      ctx,
      list,
    );
  }

  late final _libusbGetDeviceListPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetDeviceList>>(
          'libusb_get_device_list');
  late final _DartLibusbGetDeviceList _libusbGetDeviceList =
      _libusbGetDeviceListPtr.asFunction<_DartLibusbGetDeviceList>();

  void libusbFreeDeviceList(
    ffi.Pointer<ffi.Pointer<LibusbDevice>> list,
    int unrefDevices,
  ) {
    return _libusbFreeDeviceList(
      list,
      unrefDevices,
    );
  }

  late final _libusbFreeDeviceListPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreeDeviceList>>(
          'libusb_free_device_list');
  late final _DartLibusbFreeDeviceList _libusbFreeDeviceList =
      _libusbFreeDeviceListPtr.asFunction<_DartLibusbFreeDeviceList>();

  ffi.Pointer<LibusbDevice> libusbRefDevice(
    ffi.Pointer<LibusbDevice> dev,
  ) {
    return _libusbRefDevice(
      dev,
    );
  }

  late final _libusbRefDevicePtr =
      _lookup<ffi.NativeFunction<_CLibusbRefDevice>>('libusb_ref_device');
  late final _DartLibusbRefDevice _libusbRefDevice =
      _libusbRefDevicePtr.asFunction<_DartLibusbRefDevice>();

  void libusbUnrefDevice(
    ffi.Pointer<LibusbDevice> dev,
  ) {
    return _libusbUnrefDevice(
      dev,
    );
  }

  late final _libusbUnrefDevicePtr =
      _lookup<ffi.NativeFunction<_CLibusbUnrefDevice>>('libusb_unref_device');
  late final _DartLibusbUnrefDevice _libusbUnrefDevice =
      _libusbUnrefDevicePtr.asFunction<_DartLibusbUnrefDevice>();

  int libusbGetConfiguration(
    ffi.Pointer<LibusbDeviceHandle> dev,
    ffi.Pointer<ffi.Int32> config,
  ) {
    return _libusbGetConfiguration(
      dev,
      config,
    );
  }

  late final _libusbGetConfigurationPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetConfiguration>>(
          'libusb_get_configuration');
  late final _DartLibusbGetConfiguration _libusbGetConfiguration =
      _libusbGetConfigurationPtr.asFunction<_DartLibusbGetConfiguration>();

  int libusbGetDeviceDescriptor(
    ffi.Pointer<LibusbDevice> dev,
    ffi.Pointer<LibusbDeviceDescriptor> desc,
  ) {
    return _libusbGetDeviceDescriptor(
      dev,
      desc,
    );
  }

  late final _libusbGetDeviceDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetDeviceDescriptor>>(
          'libusb_get_device_descriptor');
  late final _DartLibusbGetDeviceDescriptor _libusbGetDeviceDescriptor =
      _libusbGetDeviceDescriptorPtr
          .asFunction<_DartLibusbGetDeviceDescriptor>();

  int libusbGetActiveConfigDescriptor(
    ffi.Pointer<LibusbDevice> dev,
    ffi.Pointer<ffi.Pointer<LibusbConfigDescriptor>> config,
  ) {
    return _libusbGetActiveConfigDescriptor(
      dev,
      config,
    );
  }

  late final _libusbGetActiveConfigDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetActiveConfigDescriptor>>(
          'libusb_get_active_config_descriptor');
  late final _DartLibusbGetActiveConfigDescriptor
      _libusbGetActiveConfigDescriptor = _libusbGetActiveConfigDescriptorPtr
          .asFunction<_DartLibusbGetActiveConfigDescriptor>();

  int libusbGetConfigDescriptor(
    ffi.Pointer<LibusbDevice> dev,
    int configIndex,
    ffi.Pointer<ffi.Pointer<LibusbConfigDescriptor>> config,
  ) {
    return _libusbGetConfigDescriptor(
      dev,
      configIndex,
      config,
    );
  }

  late final _libusbGetConfigDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetConfigDescriptor>>(
          'libusb_get_config_descriptor');
  late final _DartLibusbGetConfigDescriptor _libusbGetConfigDescriptor =
      _libusbGetConfigDescriptorPtr
          .asFunction<_DartLibusbGetConfigDescriptor>();

  int libusbGetConfigDescriptorByValue(
    ffi.Pointer<LibusbDevice> dev,
    int bConfigurationValue,
    ffi.Pointer<ffi.Pointer<LibusbConfigDescriptor>> config,
  ) {
    return _libusbGetConfigDescriptorByValue(
      dev,
      bConfigurationValue,
      config,
    );
  }

  late final _libusbGetConfigDescriptorByValuePtr =
      _lookup<ffi.NativeFunction<_CLibusbGetConfigDescriptorByValue>>(
          'libusb_get_config_descriptor_by_value');
  late final _DartLibusbGetConfigDescriptorByValue
      _libusbGetConfigDescriptorByValue = _libusbGetConfigDescriptorByValuePtr
          .asFunction<_DartLibusbGetConfigDescriptorByValue>();

  void libusbFreeConfigDescriptor(
    ffi.Pointer<LibusbConfigDescriptor> config,
  ) {
    return _libusbFreeConfigDescriptor(
      config,
    );
  }

  late final _libusbFreeConfigDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreeConfigDescriptor>>(
          'libusb_free_config_descriptor');
  late final _DartLibusbFreeConfigDescriptor _libusbFreeConfigDescriptor =
      _libusbFreeConfigDescriptorPtr
          .asFunction<_DartLibusbFreeConfigDescriptor>();

  int libusbGetSsEndpointCompanionDescriptor(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<LibusbEndpointDescriptor> endpoint,
    ffi.Pointer<ffi.Pointer<LibusbSsEndpointCompanionDescriptor>> epComp,
  ) {
    return _libusbGetSsEndpointCompanionDescriptor(
      ctx,
      endpoint,
      epComp,
    );
  }

  late final _libusbGetSsEndpointCompanionDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetSsEndpointCompanionDescriptor>>(
          'libusb_get_ss_endpoint_companion_descriptor');
  late final _DartLibusbGetSsEndpointCompanionDescriptor
      _libusbGetSsEndpointCompanionDescriptor =
      _libusbGetSsEndpointCompanionDescriptorPtr
          .asFunction<_DartLibusbGetSsEndpointCompanionDescriptor>();

  void libusbFreeSsEndpointCompanionDescriptor(
    ffi.Pointer<LibusbSsEndpointCompanionDescriptor> epComp,
  ) {
    return _libusbFreeSsEndpointCompanionDescriptor(
      epComp,
    );
  }

  late final _libusbFreeSsEndpointCompanionDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreeSsEndpointCompanionDescriptor>>(
          'libusb_free_ss_endpoint_companion_descriptor');
  late final _DartLibusbFreeSsEndpointCompanionDescriptor
      _libusbFreeSsEndpointCompanionDescriptor =
      _libusbFreeSsEndpointCompanionDescriptorPtr
          .asFunction<_DartLibusbFreeSsEndpointCompanionDescriptor>();

  int libusbGetBosDescriptor(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    ffi.Pointer<ffi.Pointer<LibusbBosDescriptor>> bos,
  ) {
    return _libusbGetBosDescriptor(
      devHandle,
      bos,
    );
  }

  late final _libusbGetBosDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetBosDescriptor>>(
          'libusb_get_bos_descriptor');
  late final _DartLibusbGetBosDescriptor _libusbGetBosDescriptor =
      _libusbGetBosDescriptorPtr.asFunction<_DartLibusbGetBosDescriptor>();

  void libusbFreeBosDescriptor(
    ffi.Pointer<LibusbBosDescriptor> bos,
  ) {
    return _libusbFreeBosDescriptor(
      bos,
    );
  }

  late final _libusbFreeBosDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreeBosDescriptor>>(
          'libusb_free_bos_descriptor');
  late final _DartLibusbFreeBosDescriptor _libusbFreeBosDescriptor =
      _libusbFreeBosDescriptorPtr.asFunction<_DartLibusbFreeBosDescriptor>();

  int libusbGetUsb20ExtensionDescriptor(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<LibusbBosDevCapabilityDescriptor> devCap,
    ffi.Pointer<ffi.Pointer<LibusbUsb20ExtensionDescriptor>> usb20Extension,
  ) {
    return _libusbGetUsb20ExtensionDescriptor(
      ctx,
      devCap,
      usb20Extension,
    );
  }

  late final _libusbGetUsb20ExtensionDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetUsb20ExtensionDescriptor>>(
          'libusb_get_usb_2_0_extension_descriptor');
  late final _DartLibusbGetUsb20ExtensionDescriptor
      _libusbGetUsb20ExtensionDescriptor = _libusbGetUsb20ExtensionDescriptorPtr
          .asFunction<_DartLibusbGetUsb20ExtensionDescriptor>();

  void libusbFreeUsb20ExtensionDescriptor(
    ffi.Pointer<LibusbUsb20ExtensionDescriptor> usb20Extension,
  ) {
    return _libusbFreeUsb20ExtensionDescriptor(
      usb20Extension,
    );
  }

  late final _libusbFreeUsb20ExtensionDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreeUsb20ExtensionDescriptor>>(
          'libusb_free_usb_2_0_extension_descriptor');
  late final _DartLibusbFreeUsb20ExtensionDescriptor
      _libusbFreeUsb20ExtensionDescriptor =
      _libusbFreeUsb20ExtensionDescriptorPtr
          .asFunction<_DartLibusbFreeUsb20ExtensionDescriptor>();

  int libusbGetSsUsbDeviceCapabilityDescriptor(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<LibusbBosDevCapabilityDescriptor> devCap,
    ffi.Pointer<ffi.Pointer<LibusbSsUsbDeviceCapabilityDescriptor>>
        ssUsbDeviceCap,
  ) {
    return _libusbGetSsUsbDeviceCapabilityDescriptor(
      ctx,
      devCap,
      ssUsbDeviceCap,
    );
  }

  late final _libusbGetSsUsbDeviceCapabilityDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetSsUsbDeviceCapabilityDescriptor>>(
          'libusb_get_ss_usb_device_capability_descriptor');
  late final _DartLibusbGetSsUsbDeviceCapabilityDescriptor
      _libusbGetSsUsbDeviceCapabilityDescriptor =
      _libusbGetSsUsbDeviceCapabilityDescriptorPtr
          .asFunction<_DartLibusbGetSsUsbDeviceCapabilityDescriptor>();

  void libusbFreeSsUsbDeviceCapabilityDescriptor(
    ffi.Pointer<LibusbSsUsbDeviceCapabilityDescriptor> ssUsbDeviceCap,
  ) {
    return _libusbFreeSsUsbDeviceCapabilityDescriptor(
      ssUsbDeviceCap,
    );
  }

  late final _libusbFreeSsUsbDeviceCapabilityDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreeSsUsbDeviceCapabilityDescriptor>>(
          'libusb_free_ss_usb_device_capability_descriptor');
  late final _DartLibusbFreeSsUsbDeviceCapabilityDescriptor
      _libusbFreeSsUsbDeviceCapabilityDescriptor =
      _libusbFreeSsUsbDeviceCapabilityDescriptorPtr
          .asFunction<_DartLibusbFreeSsUsbDeviceCapabilityDescriptor>();

  int libusbGetContainerIdDescriptor(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<LibusbBosDevCapabilityDescriptor> devCap,
    ffi.Pointer<ffi.Pointer<LibusbContainerIdDescriptor>> containerId,
  ) {
    return _libusbGetContainerIdDescriptor(
      ctx,
      devCap,
      containerId,
    );
  }

  late final _libusbGetContainerIdDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetContainerIdDescriptor>>(
          'libusb_get_container_id_descriptor');
  late final _DartLibusbGetContainerIdDescriptor
      _libusbGetContainerIdDescriptor = _libusbGetContainerIdDescriptorPtr
          .asFunction<_DartLibusbGetContainerIdDescriptor>();

  void libusbFreeContainerIdDescriptor(
    ffi.Pointer<LibusbContainerIdDescriptor> containerId,
  ) {
    return _libusbFreeContainerIdDescriptor(
      containerId,
    );
  }

  late final _libusbFreeContainerIdDescriptorPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreeContainerIdDescriptor>>(
          'libusb_free_container_id_descriptor');
  late final _DartLibusbFreeContainerIdDescriptor
      _libusbFreeContainerIdDescriptor = _libusbFreeContainerIdDescriptorPtr
          .asFunction<_DartLibusbFreeContainerIdDescriptor>();

  int libusbGetBusNumber(
    ffi.Pointer<LibusbDevice> dev,
  ) {
    return _libusbGetBusNumber(
      dev,
    );
  }

  late final _libusbGetBusNumberPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetBusNumber>>(
          'libusb_get_bus_number');
  late final _DartLibusbGetBusNumber _libusbGetBusNumber =
      _libusbGetBusNumberPtr.asFunction<_DartLibusbGetBusNumber>();

  int libusbGetPortNumber(
    ffi.Pointer<LibusbDevice> dev,
  ) {
    return _libusbGetPortNumber(
      dev,
    );
  }

  late final _libusbGetPortNumberPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetPortNumber>>(
          'libusb_get_port_number');
  late final _DartLibusbGetPortNumber _libusbGetPortNumber =
      _libusbGetPortNumberPtr.asFunction<_DartLibusbGetPortNumber>();

  int libusbGetPortNumbers(
    ffi.Pointer<LibusbDevice> dev,
    ffi.Pointer<ffi.Uint8> portNumbers,
    int portNumbersLen,
  ) {
    return _libusbGetPortNumbers(
      dev,
      portNumbers,
      portNumbersLen,
    );
  }

  late final _libusbGetPortNumbersPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetPortNumbers>>(
          'libusb_get_port_numbers');
  late final _DartLibusbGetPortNumbers _libusbGetPortNumbers =
      _libusbGetPortNumbersPtr.asFunction<_DartLibusbGetPortNumbers>();

  int libusbGetPortPath(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<LibusbDevice> dev,
    ffi.Pointer<ffi.Uint8> path,
    int pathLength,
  ) {
    return _libusbGetPortPath(
      ctx,
      dev,
      path,
      pathLength,
    );
  }

  late final _libusbGetPortPathPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetPortPath>>('libusb_get_port_path');
  late final _DartLibusbGetPortPath _libusbGetPortPath =
      _libusbGetPortPathPtr.asFunction<_DartLibusbGetPortPath>();

  ffi.Pointer<LibusbDevice> libusbGetParent(
    ffi.Pointer<LibusbDevice> dev,
  ) {
    return _libusbGetParent(
      dev,
    );
  }

  late final _libusbGetParentPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetParent>>('libusb_get_parent');
  late final _DartLibusbGetParent _libusbGetParent =
      _libusbGetParentPtr.asFunction<_DartLibusbGetParent>();

  int libusbGetDeviceAddress(
    ffi.Pointer<LibusbDevice> dev,
  ) {
    return _libusbGetDeviceAddress(
      dev,
    );
  }

  late final _libusbGetDeviceAddressPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetDeviceAddress>>(
          'libusb_get_device_address');
  late final _DartLibusbGetDeviceAddress _libusbGetDeviceAddress =
      _libusbGetDeviceAddressPtr.asFunction<_DartLibusbGetDeviceAddress>();

  int libusbGetDeviceSpeed(
    ffi.Pointer<LibusbDevice> dev,
  ) {
    return _libusbGetDeviceSpeed(
      dev,
    );
  }

  late final _libusbGetDeviceSpeedPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetDeviceSpeed>>(
          'libusb_get_device_speed');
  late final _DartLibusbGetDeviceSpeed _libusbGetDeviceSpeed =
      _libusbGetDeviceSpeedPtr.asFunction<_DartLibusbGetDeviceSpeed>();

  int libusbGetMaxPacketSize(
    ffi.Pointer<LibusbDevice> dev,
    int endpoint,
  ) {
    return _libusbGetMaxPacketSize(
      dev,
      endpoint,
    );
  }

  late final _libusbGetMaxPacketSizePtr =
      _lookup<ffi.NativeFunction<_CLibusbGetMaxPacketSize>>(
          'libusb_get_max_packet_size');
  late final _DartLibusbGetMaxPacketSize _libusbGetMaxPacketSize =
      _libusbGetMaxPacketSizePtr.asFunction<_DartLibusbGetMaxPacketSize>();

  int libusbGetMaxIsoPacketSize(
    ffi.Pointer<LibusbDevice> dev,
    int endpoint,
  ) {
    return _libusbGetMaxIsoPacketSize(
      dev,
      endpoint,
    );
  }

  late final _libusbGetMaxIsoPacketSizePtr =
      _lookup<ffi.NativeFunction<_CLibusbGetMaxIsoPacketSize>>(
          'libusb_get_max_iso_packet_size');
  late final _DartLibusbGetMaxIsoPacketSize _libusbGetMaxIsoPacketSize =
      _libusbGetMaxIsoPacketSizePtr
          .asFunction<_DartLibusbGetMaxIsoPacketSize>();

  int libusbWrapSysDevice(
    ffi.Pointer<LibusbContext> ctx,
    int sysDev,
    ffi.Pointer<ffi.Pointer<LibusbDeviceHandle>> devHandle,
  ) {
    return _libusbWrapSysDevice(
      ctx,
      sysDev,
      devHandle,
    );
  }

  late final _libusbWrapSysDevicePtr =
      _lookup<ffi.NativeFunction<_CLibusbWrapSysDevice>>(
          'libusb_wrap_sys_device');
  late final _DartLibusbWrapSysDevice _libusbWrapSysDevice =
      _libusbWrapSysDevicePtr.asFunction<_DartLibusbWrapSysDevice>();

  int libusbOpen(
    ffi.Pointer<LibusbDevice> dev,
    ffi.Pointer<ffi.Pointer<LibusbDeviceHandle>> devHandle,
  ) {
    return _libusbOpen(
      dev,
      devHandle,
    );
  }

  late final _libusbOpenPtr =
      _lookup<ffi.NativeFunction<_CLibusbOpen>>('libusb_open');
  late final _DartLibusbOpen _libusbOpen =
      _libusbOpenPtr.asFunction<_DartLibusbOpen>();

  void libusbClose(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
  ) {
    return _libusbClose(
      devHandle,
    );
  }

  late final _libusbClosePtr =
      _lookup<ffi.NativeFunction<_CLibusbClose>>('libusb_close');
  late final _DartLibusbClose _libusbClose =
      _libusbClosePtr.asFunction<_DartLibusbClose>();

  ffi.Pointer<LibusbDevice> libusbGetDevice(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
  ) {
    return _libusbGetDevice(
      devHandle,
    );
  }

  late final _libusbGetDevicePtr =
      _lookup<ffi.NativeFunction<_CLibusbGetDevice>>('libusb_get_device');
  late final _DartLibusbGetDevice _libusbGetDevice =
      _libusbGetDevicePtr.asFunction<_DartLibusbGetDevice>();

  int libusbSetConfiguration(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int configuration,
  ) {
    return _libusbSetConfiguration(
      devHandle,
      configuration,
    );
  }

  late final _libusbSetConfigurationPtr =
      _lookup<ffi.NativeFunction<_CLibusbSetConfiguration>>(
          'libusb_set_configuration');
  late final _DartLibusbSetConfiguration _libusbSetConfiguration =
      _libusbSetConfigurationPtr.asFunction<_DartLibusbSetConfiguration>();

  int libusbClaimInterface(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int interfaceNumber,
  ) {
    return _libusbClaimInterface(
      devHandle,
      interfaceNumber,
    );
  }

  late final _libusbClaimInterfacePtr =
      _lookup<ffi.NativeFunction<_CLibusbClaimInterface>>(
          'libusb_claim_interface');
  late final _DartLibusbClaimInterface _libusbClaimInterface =
      _libusbClaimInterfacePtr.asFunction<_DartLibusbClaimInterface>();

  int libusbReleaseInterface(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int interfaceNumber,
  ) {
    return _libusbReleaseInterface(
      devHandle,
      interfaceNumber,
    );
  }

  late final _libusbReleaseInterfacePtr =
      _lookup<ffi.NativeFunction<_CLibusbReleaseInterface>>(
          'libusb_release_interface');
  late final _DartLibusbReleaseInterface _libusbReleaseInterface =
      _libusbReleaseInterfacePtr.asFunction<_DartLibusbReleaseInterface>();

  ffi.Pointer<LibusbDeviceHandle> libusbOpenDeviceWithVidPid(
    ffi.Pointer<LibusbContext> ctx,
    int vendorId,
    int productId,
  ) {
    return _libusbOpenDeviceWithVidPid(
      ctx,
      vendorId,
      productId,
    );
  }

  late final _libusbOpenDeviceWithVidPidPtr =
      _lookup<ffi.NativeFunction<_CLibusbOpenDeviceWithVidPid>>(
          'libusb_open_device_with_vid_pid');
  late final _DartLibusbOpenDeviceWithVidPid _libusbOpenDeviceWithVidPid =
      _libusbOpenDeviceWithVidPidPtr
          .asFunction<_DartLibusbOpenDeviceWithVidPid>();

  int libusbSetInterfaceAltSetting(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int interfaceNumber,
    int alternateSetting,
  ) {
    return _libusbSetInterfaceAltSetting(
      devHandle,
      interfaceNumber,
      alternateSetting,
    );
  }

  late final _libusbSetInterfaceAltSettingPtr =
      _lookup<ffi.NativeFunction<_CLibusbSetInterfaceAltSetting>>(
          'libusb_set_interface_alt_setting');
  late final _DartLibusbSetInterfaceAltSetting _libusbSetInterfaceAltSetting =
      _libusbSetInterfaceAltSettingPtr
          .asFunction<_DartLibusbSetInterfaceAltSetting>();

  int libusbClearHalt(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int endpoint,
  ) {
    return _libusbClearHalt(
      devHandle,
      endpoint,
    );
  }

  late final _libusbClearHaltPtr =
      _lookup<ffi.NativeFunction<_CLibusbClearHalt>>('libusb_clear_halt');
  late final _DartLibusbClearHalt _libusbClearHalt =
      _libusbClearHaltPtr.asFunction<_DartLibusbClearHalt>();

  int libusbResetDevice(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
  ) {
    return _libusbResetDevice(
      devHandle,
    );
  }

  late final _libusbResetDevicePtr =
      _lookup<ffi.NativeFunction<_CLibusbResetDevice>>('libusb_reset_device');
  late final _DartLibusbResetDevice _libusbResetDevice =
      _libusbResetDevicePtr.asFunction<_DartLibusbResetDevice>();

  int libusbAllocStreams(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int numStreams,
    ffi.Pointer<ffi.Uint8> endpoints,
    int numEndpoints,
  ) {
    return _libusbAllocStreams(
      devHandle,
      numStreams,
      endpoints,
      numEndpoints,
    );
  }

  late final _libusbAllocStreamsPtr =
      _lookup<ffi.NativeFunction<_CLibusbAllocStreams>>('libusb_alloc_streams');
  late final _DartLibusbAllocStreams _libusbAllocStreams =
      _libusbAllocStreamsPtr.asFunction<_DartLibusbAllocStreams>();

  int libusbFreeStreams(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    ffi.Pointer<ffi.Uint8> endpoints,
    int numEndpoints,
  ) {
    return _libusbFreeStreams(
      devHandle,
      endpoints,
      numEndpoints,
    );
  }

  late final _libusbFreeStreamsPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreeStreams>>('libusb_free_streams');
  late final _DartLibusbFreeStreams _libusbFreeStreams =
      _libusbFreeStreamsPtr.asFunction<_DartLibusbFreeStreams>();

  ffi.Pointer<ffi.Uint8> libusbDevMemAlloc(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int length,
  ) {
    return _libusbDevMemAlloc(
      devHandle,
      length,
    );
  }

  late final _libusbDevMemAllocPtr =
      _lookup<ffi.NativeFunction<_CLibusbDevMemAlloc>>('libusb_dev_mem_alloc');
  late final _DartLibusbDevMemAlloc _libusbDevMemAlloc =
      _libusbDevMemAllocPtr.asFunction<_DartLibusbDevMemAlloc>();

  int libusbDevMemFree(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    ffi.Pointer<ffi.Uint8> buffer,
    int length,
  ) {
    return _libusbDevMemFree(
      devHandle,
      buffer,
      length,
    );
  }

  late final _libusbDevMemFreePtr =
      _lookup<ffi.NativeFunction<_CLibusbDevMemFree>>('libusb_dev_mem_free');
  late final _DartLibusbDevMemFree _libusbDevMemFree =
      _libusbDevMemFreePtr.asFunction<_DartLibusbDevMemFree>();

  int libusbKernelDriverActive(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int interfaceNumber,
  ) {
    return _libusbKernelDriverActive(
      devHandle,
      interfaceNumber,
    );
  }

  late final _libusbKernelDriverActivePtr =
      _lookup<ffi.NativeFunction<_CLibusbKernelDriverActive>>(
          'libusb_kernel_driver_active');
  late final _DartLibusbKernelDriverActive _libusbKernelDriverActive =
      _libusbKernelDriverActivePtr.asFunction<_DartLibusbKernelDriverActive>();

  int libusbDetachKernelDriver(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int interfaceNumber,
  ) {
    return _libusbDetachKernelDriver(
      devHandle,
      interfaceNumber,
    );
  }

  late final _libusbDetachKernelDriverPtr =
      _lookup<ffi.NativeFunction<_CLibusbDetachKernelDriver>>(
          'libusb_detach_kernel_driver');
  late final _DartLibusbDetachKernelDriver _libusbDetachKernelDriver =
      _libusbDetachKernelDriverPtr.asFunction<_DartLibusbDetachKernelDriver>();

  int libusbAttachKernelDriver(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int interfaceNumber,
  ) {
    return _libusbAttachKernelDriver(
      devHandle,
      interfaceNumber,
    );
  }

  late final _libusbAttachKernelDriverPtr =
      _lookup<ffi.NativeFunction<_CLibusbAttachKernelDriver>>(
          'libusb_attach_kernel_driver');
  late final _DartLibusbAttachKernelDriver _libusbAttachKernelDriver =
      _libusbAttachKernelDriverPtr.asFunction<_DartLibusbAttachKernelDriver>();

  int libusbSetAutoDetachKernelDriver(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int enable,
  ) {
    return _libusbSetAutoDetachKernelDriver(
      devHandle,
      enable,
    );
  }

  late final _libusbSetAutoDetachKernelDriverPtr =
      _lookup<ffi.NativeFunction<_CLibusbSetAutoDetachKernelDriver>>(
          'libusb_set_auto_detach_kernel_driver');
  late final _DartLibusbSetAutoDetachKernelDriver
      _libusbSetAutoDetachKernelDriver = _libusbSetAutoDetachKernelDriverPtr
          .asFunction<_DartLibusbSetAutoDetachKernelDriver>();

  ffi.Pointer<LibusbTransfer> libusbAllocTransfer(
    int isoPackets,
  ) {
    return _libusbAllocTransfer(
      isoPackets,
    );
  }

  late final _libusbAllocTransferPtr =
      _lookup<ffi.NativeFunction<_CLibusbAllocTransfer>>(
          'libusb_alloc_transfer');
  late final _DartLibusbAllocTransfer _libusbAllocTransfer =
      _libusbAllocTransferPtr.asFunction<_DartLibusbAllocTransfer>();

  int libusbSubmitTransfer(
    ffi.Pointer<LibusbTransfer> transfer,
  ) {
    return _libusbSubmitTransfer(
      transfer,
    );
  }

  late final _libusbSubmitTransferPtr =
      _lookup<ffi.NativeFunction<_CLibusbSubmitTransfer>>(
          'libusb_submit_transfer');
  late final _DartLibusbSubmitTransfer _libusbSubmitTransfer =
      _libusbSubmitTransferPtr.asFunction<_DartLibusbSubmitTransfer>();

  int libusbCancelTransfer(
    ffi.Pointer<LibusbTransfer> transfer,
  ) {
    return _libusbCancelTransfer(
      transfer,
    );
  }

  late final _libusbCancelTransferPtr =
      _lookup<ffi.NativeFunction<_CLibusbCancelTransfer>>(
          'libusb_cancel_transfer');
  late final _DartLibusbCancelTransfer _libusbCancelTransfer =
      _libusbCancelTransferPtr.asFunction<_DartLibusbCancelTransfer>();

  void libusbFreeTransfer(
    ffi.Pointer<LibusbTransfer> transfer,
  ) {
    return _libusbFreeTransfer(
      transfer,
    );
  }

  late final _libusbFreeTransferPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreeTransfer>>('libusb_free_transfer');
  late final _DartLibusbFreeTransfer _libusbFreeTransfer =
      _libusbFreeTransferPtr.asFunction<_DartLibusbFreeTransfer>();

  void libusbTransferSetStreamId(
    ffi.Pointer<LibusbTransfer> transfer,
    int streamId,
  ) {
    return _libusbTransferSetStreamId(
      transfer,
      streamId,
    );
  }

  late final _libusbTransferSetStreamIdPtr =
      _lookup<ffi.NativeFunction<_CLibusbTransferSetStreamId>>(
          'libusb_transfer_set_stream_id');
  late final _DartLibusbTransferSetStreamId _libusbTransferSetStreamId =
      _libusbTransferSetStreamIdPtr
          .asFunction<_DartLibusbTransferSetStreamId>();

  int libusbTransferGetStreamId(
    ffi.Pointer<LibusbTransfer> transfer,
  ) {
    return _libusbTransferGetStreamId(
      transfer,
    );
  }

  late final _libusbTransferGetStreamIdPtr =
      _lookup<ffi.NativeFunction<_CLibusbTransferGetStreamId>>(
          'libusb_transfer_get_stream_id');
  late final _DartLibusbTransferGetStreamId _libusbTransferGetStreamId =
      _libusbTransferGetStreamIdPtr
          .asFunction<_DartLibusbTransferGetStreamId>();

  int libusbControlTransfer(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int requestType,
    int bRequest,
    int wValue,
    int wIndex,
    ffi.Pointer<ffi.Uint8> data,
    int wLength,
    int timeout,
  ) {
    return _libusbControlTransfer(
      devHandle,
      requestType,
      bRequest,
      wValue,
      wIndex,
      data,
      wLength,
      timeout,
    );
  }

  late final _libusbControlTransferPtr =
      _lookup<ffi.NativeFunction<_CLibusbControlTransfer>>(
          'libusb_control_transfer');
  late final _DartLibusbControlTransfer _libusbControlTransfer =
      _libusbControlTransferPtr.asFunction<_DartLibusbControlTransfer>();

  int libusbBulkTransfer(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int endpoint,
    ffi.Pointer<ffi.Uint8> data,
    int length,
    ffi.Pointer<ffi.Int32> actualLength,
    int timeout,
  ) {
    return _libusbBulkTransfer(
      devHandle,
      endpoint,
      data,
      length,
      actualLength,
      timeout,
    );
  }

  late final _libusbBulkTransferPtr =
      _lookup<ffi.NativeFunction<_CLibusbBulkTransfer>>('libusb_bulk_transfer');
  late final _DartLibusbBulkTransfer _libusbBulkTransfer =
      _libusbBulkTransferPtr.asFunction<_DartLibusbBulkTransfer>();

  int libusbInterruptTransfer(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int endpoint,
    ffi.Pointer<ffi.Uint8> data,
    int length,
    ffi.Pointer<ffi.Int32> actualLength,
    int timeout,
  ) {
    return _libusbInterruptTransfer(
      devHandle,
      endpoint,
      data,
      length,
      actualLength,
      timeout,
    );
  }

  late final _libusbInterruptTransferPtr =
      _lookup<ffi.NativeFunction<_CLibusbInterruptTransfer>>(
          'libusb_interrupt_transfer');
  late final _DartLibusbInterruptTransfer _libusbInterruptTransfer =
      _libusbInterruptTransferPtr.asFunction<_DartLibusbInterruptTransfer>();

  int libusbGetStringDescriptorAscii(
    ffi.Pointer<LibusbDeviceHandle> devHandle,
    int descIndex,
    ffi.Pointer<ffi.Uint8> data,
    int length,
  ) {
    return _libusbGetStringDescriptorAscii(
      devHandle,
      descIndex,
      data,
      length,
    );
  }

  late final _libusbGetStringDescriptorAsciiPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetStringDescriptorAscii>>(
          'libusb_get_string_descriptor_ascii');
  late final _DartLibusbGetStringDescriptorAscii
      _libusbGetStringDescriptorAscii = _libusbGetStringDescriptorAsciiPtr
          .asFunction<_DartLibusbGetStringDescriptorAscii>();

  int libusbTryLockEvents(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbTryLockEvents(
      ctx,
    );
  }

  late final _libusbTryLockEventsPtr =
      _lookup<ffi.NativeFunction<_CLibusbTryLockEvents>>(
          'libusb_try_lock_events');
  late final _DartLibusbTryLockEvents _libusbTryLockEvents =
      _libusbTryLockEventsPtr.asFunction<_DartLibusbTryLockEvents>();

  void libusbLockEvents(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbLockEvents(
      ctx,
    );
  }

  late final _libusbLockEventsPtr =
      _lookup<ffi.NativeFunction<_CLibusbLockEvents>>('libusb_lock_events');
  late final _DartLibusbLockEvents _libusbLockEvents =
      _libusbLockEventsPtr.asFunction<_DartLibusbLockEvents>();

  void libusbUnlockEvents(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbUnlockEvents(
      ctx,
    );
  }

  late final _libusbUnlockEventsPtr =
      _lookup<ffi.NativeFunction<_CLibusbUnlockEvents>>('libusb_unlock_events');
  late final _DartLibusbUnlockEvents _libusbUnlockEvents =
      _libusbUnlockEventsPtr.asFunction<_DartLibusbUnlockEvents>();

  int libusbEventHandlingOk(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbEventHandlingOk(
      ctx,
    );
  }

  late final _libusbEventHandlingOkPtr =
      _lookup<ffi.NativeFunction<_CLibusbEventHandlingOk>>(
          'libusb_event_handling_ok');
  late final _DartLibusbEventHandlingOk _libusbEventHandlingOk =
      _libusbEventHandlingOkPtr.asFunction<_DartLibusbEventHandlingOk>();

  int libusbEventHandlerActive(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbEventHandlerActive(
      ctx,
    );
  }

  late final _libusbEventHandlerActivePtr =
      _lookup<ffi.NativeFunction<_CLibusbEventHandlerActive>>(
          'libusb_event_handler_active');
  late final _DartLibusbEventHandlerActive _libusbEventHandlerActive =
      _libusbEventHandlerActivePtr.asFunction<_DartLibusbEventHandlerActive>();

  void libusbInterruptEventHandler(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbInterruptEventHandler(
      ctx,
    );
  }

  late final _libusbInterruptEventHandlerPtr =
      _lookup<ffi.NativeFunction<_CLibusbInterruptEventHandler>>(
          'libusb_interrupt_event_handler');
  late final _DartLibusbInterruptEventHandler _libusbInterruptEventHandler =
      _libusbInterruptEventHandlerPtr
          .asFunction<_DartLibusbInterruptEventHandler>();

  void libusbLockEventWaiters(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbLockEventWaiters(
      ctx,
    );
  }

  late final _libusbLockEventWaitersPtr =
      _lookup<ffi.NativeFunction<_CLibusbLockEventWaiters>>(
          'libusb_lock_event_waiters');
  late final _DartLibusbLockEventWaiters _libusbLockEventWaiters =
      _libusbLockEventWaitersPtr.asFunction<_DartLibusbLockEventWaiters>();

  void libusbUnlockEventWaiters(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbUnlockEventWaiters(
      ctx,
    );
  }

  late final _libusbUnlockEventWaitersPtr =
      _lookup<ffi.NativeFunction<_CLibusbUnlockEventWaiters>>(
          'libusb_unlock_event_waiters');
  late final _DartLibusbUnlockEventWaiters _libusbUnlockEventWaiters =
      _libusbUnlockEventWaitersPtr.asFunction<_DartLibusbUnlockEventWaiters>();

  int libusbWaitForEvent(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<Timeval32> tv,
  ) {
    return _libusbWaitForEvent(
      ctx,
      tv,
    );
  }

  late final _libusbWaitForEventPtr =
      _lookup<ffi.NativeFunction<_CLibusbWaitForEvent>>(
          'libusb_wait_for_event');
  late final _DartLibusbWaitForEvent _libusbWaitForEvent =
      _libusbWaitForEventPtr.asFunction<_DartLibusbWaitForEvent>();

  int libusbHandleEventsTimeout(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<Timeval32> tv,
  ) {
    return _libusbHandleEventsTimeout(
      ctx,
      tv,
    );
  }

  late final _libusbHandleEventsTimeoutPtr =
      _lookup<ffi.NativeFunction<_CLibusbHandleEventsTimeout>>(
          'libusb_handle_events_timeout');
  late final _DartLibusbHandleEventsTimeout _libusbHandleEventsTimeout =
      _libusbHandleEventsTimeoutPtr
          .asFunction<_DartLibusbHandleEventsTimeout>();

  int libusbHandleEventsTimeoutCompleted(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<Timeval32> tv,
    ffi.Pointer<ffi.Int32> completed,
  ) {
    return _libusbHandleEventsTimeoutCompleted(
      ctx,
      tv,
      completed,
    );
  }

  late final _libusbHandleEventsTimeoutCompletedPtr =
      _lookup<ffi.NativeFunction<_CLibusbHandleEventsTimeoutCompleted>>(
          'libusb_handle_events_timeout_completed');
  late final _DartLibusbHandleEventsTimeoutCompleted
      _libusbHandleEventsTimeoutCompleted =
      _libusbHandleEventsTimeoutCompletedPtr
          .asFunction<_DartLibusbHandleEventsTimeoutCompleted>();

  int libusbHandleEvents(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbHandleEvents(
      ctx,
    );
  }

  late final _libusbHandleEventsPtr =
      _lookup<ffi.NativeFunction<_CLibusbHandleEvents>>('libusb_handle_events');
  late final _DartLibusbHandleEvents _libusbHandleEvents =
      _libusbHandleEventsPtr.asFunction<_DartLibusbHandleEvents>();

  int libusbHandleEventsCompleted(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<ffi.Int32> completed,
  ) {
    return _libusbHandleEventsCompleted(
      ctx,
      completed,
    );
  }

  late final _libusbHandleEventsCompletedPtr =
      _lookup<ffi.NativeFunction<_CLibusbHandleEventsCompleted>>(
          'libusb_handle_events_completed');
  late final _DartLibusbHandleEventsCompleted _libusbHandleEventsCompleted =
      _libusbHandleEventsCompletedPtr
          .asFunction<_DartLibusbHandleEventsCompleted>();

  int libusbHandleEventsLocked(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<Timeval32> tv,
  ) {
    return _libusbHandleEventsLocked(
      ctx,
      tv,
    );
  }

  late final _libusbHandleEventsLockedPtr =
      _lookup<ffi.NativeFunction<_CLibusbHandleEventsLocked>>(
          'libusb_handle_events_locked');
  late final _DartLibusbHandleEventsLocked _libusbHandleEventsLocked =
      _libusbHandleEventsLockedPtr.asFunction<_DartLibusbHandleEventsLocked>();

  int libusbPollFdsHandleTimeouts(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbPollFdsHandleTimeouts(
      ctx,
    );
  }

  late final _libusbPollFdsHandleTimeoutsPtr =
      _lookup<ffi.NativeFunction<_CLibusbPollFdsHandleTimeouts>>(
          'libusb_pollfds_handle_timeouts');
  late final _DartLibusbPollFdsHandleTimeouts _libusbPollFdsHandleTimeouts =
      _libusbPollFdsHandleTimeoutsPtr
          .asFunction<_DartLibusbPollFdsHandleTimeouts>();

  int libusbGetNextTimeout(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<Timeval32> tv,
  ) {
    return _libusbGetNextTimeout(
      ctx,
      tv,
    );
  }

  late final _libusbGetNextTimeoutPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetNextTimeout>>(
          'libusb_get_next_timeout');
  late final _DartLibusbGetNextTimeout _libusbGetNextTimeout =
      _libusbGetNextTimeoutPtr.asFunction<_DartLibusbGetNextTimeout>();

  ffi.Pointer<ffi.Pointer<LibusbPollFd>> libusbGetPollFds(
    ffi.Pointer<LibusbContext> ctx,
  ) {
    return _libusbGetPollFds(
      ctx,
    );
  }

  late final _libusbGetPollFdsPtr =
      _lookup<ffi.NativeFunction<_CLibusbGetPollFds>>('libusb_get_pollfds');
  late final _DartLibusbGetPollFds _libusbGetPollFds =
      _libusbGetPollFdsPtr.asFunction<_DartLibusbGetPollFds>();

  void libusbFreePollFds(
    ffi.Pointer<ffi.Pointer<LibusbPollFd>> pollFds,
  ) {
    return _libusbFreePollFds(
      pollFds,
    );
  }

  late final _libusbFreePollFdsPtr =
      _lookup<ffi.NativeFunction<_CLibusbFreePollFds>>('libusb_free_pollfds');
  late final _DartLibusbFreePollFds _libusbFreePollFds =
      _libusbFreePollFdsPtr.asFunction<_DartLibusbFreePollFds>();

  void libusbSetPollFdNotifiers(
    ffi.Pointer<LibusbContext> ctx,
    ffi.Pointer<ffi.NativeFunction<LibusbPollFdAddedCb>> addedCb,
    ffi.Pointer<ffi.NativeFunction<LibusbPollFdRemovedCb>> removedCb,
    ffi.Pointer<ffi.Void> userData,
  ) {
    return _libusbSetPollFdNotifiers(
      ctx,
      addedCb,
      removedCb,
      userData,
    );
  }

  late final _libusbSetPollFdNotifiersPtr =
      _lookup<ffi.NativeFunction<_CLibusbSetPollFdNotifiers>>(
          'libusb_set_pollfd_notifiers');
  late final _DartLibusbSetPollFdNotifiers _libusbSetPollFdNotifiers =
      _libusbSetPollFdNotifiersPtr.asFunction<_DartLibusbSetPollFdNotifiers>();

  /// \ingroup libusb_hotplug
  /// Register a hotplug callback function
  ///
  /// Register a callback with the libusb_context. The callback will fire
  /// when a matching event occurs on a matching device. The callback is
  /// armed until either it is deregistered with libusbHotplugDeregisterCallback()
  /// or the supplied callback returns 1 to indicate it is finished processing events.
  ///
  /// If the \ref LIBUSB_HOTPLUG_ENUMERATE is passed the callback will be
  /// called with a \ref LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED for all devices
  /// already plugged into the machine. Note that libusb modifies its internal
  /// device list from a separate thread, while calling hotplug callbacks from
  /// libusb_handle_events(), so it is possible for a device to already be present
  /// on, or removed from, its internal device list, while the hotplug callbacks
  /// still need to be dispatched. This means that when using \ref
  /// LIBUSB_HOTPLUG_ENUMERATE, your callback may be called twice for the arrival
  /// of the same device, once from libusbHotplugRegisterCallback() and once
  /// from libusb_handle_events(); and/or your callback may be called for the
  /// removal of a device for which an arrived call was never made.
  ///
  /// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
  ///
  /// \param[in] ctx context to register this callback with
  /// \param[in] events bitwise or of events that will trigger this callback. See \ref
  /// libusb_hotplug_event
  /// \param[in] flags hotplug callback flags. See \ref libusb_hotplug_flag
  /// \param[in] vendorId the vendor id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
  /// \param[in] productId the product id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
  /// \param[in] devClass the device class to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
  /// \param[in] cbFn the function to be invoked on a matching event/device
  /// \param[in] userData user data to pass to the callback function
  /// \param[out] callbackHandle pointer to store the handle of the allocated callback (can be NULL)
  /// \returns LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure
  int libusbHotplugRegisterCallback(
    ffi.Pointer<LibusbContext> ctx,
    int events,
    int flags,
    int vendorId,
    int productId,
    int devClass,
    ffi.Pointer<ffi.NativeFunction<LibusbHotplugCallbackFn>> cbFn,
    ffi.Pointer<ffi.Void> userData,
    ffi.Pointer<ffi.Int32> callbackHandle,
  ) {
    return _libusbHotplugRegisterCallback(
      ctx,
      events,
      flags,
      vendorId,
      productId,
      devClass,
      cbFn,
      userData,
      callbackHandle,
    );
  }

  late final _libusbHotplugRegisterCallbackPtr =
      _lookup<ffi.NativeFunction<_CLibusbHotplugRegisterCallback>>(
          'libusb_hotplug_register_callback');
  late final _DartLibusbHotplugRegisterCallback _libusbHotplugRegisterCallback =
      _libusbHotplugRegisterCallbackPtr
          .asFunction<_DartLibusbHotplugRegisterCallback>();

  /// \ingroup libusb_hotplug
  /// Deregisters a hotplug callback.
  ///
  /// Deregister a callback from a libusb_context. This function is safe to call from within
  /// a hotplug callback.
  ///
  /// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
  ///
  /// \param[in] ctx context this callback is registered with
  /// \param[in] callbackHandle the handle of the callback to deregister
  void libusbHotplugDeregisterCallback(
    ffi.Pointer<LibusbContext> ctx,
    int callbackHandle,
  ) {
    return _libusbHotplugDeregisterCallback(
      ctx,
      callbackHandle,
    );
  }

  late final _libusbHotplugDeregisterCallbackPtr =
      _lookup<ffi.NativeFunction<_CLibusbHotplugDeregisterCallback>>(
          'libusb_hotplug_deregister_callback');
  late final _DartLibusbHotplugDeregisterCallback
      _libusbHotplugDeregisterCallback = _libusbHotplugDeregisterCallbackPtr
          .asFunction<_DartLibusbHotplugDeregisterCallback>();

  int libusbSetOption(
    ffi.Pointer<LibusbContext> ctx,
    int option,
  ) {
    return _libusbSetOption(
      ctx,
      option,
    );
  }

  late final _libusbSetOptionPtr =
      _lookup<ffi.NativeFunction<_CLibusbSetOption>>('libusb_set_option');
  late final _DartLibusbSetOption _libusbSetOption =
      _libusbSetOptionPtr.asFunction<_DartLibusbSetOption>();
}

/// \ingroup libusb_desc
/// Device and/or Interface Class codes
abstract class LibusbClassCode {
  /// In the context of a \ref libusb_device_descriptor "device descriptor",
  /// this bDeviceClass value indicates that each interface specifies its
  /// own class information and all interfaces operate independently.
  static const int libusbClassPerInterface = 0;

  /// Audio class
  static const int libusbClassAudio = 1;

  /// Communications class
  static const int libusbClassComm = 2;

  /// Human Interface Device class
  static const int libusbClassHid = 3;

  /// Physical
  static const int libusbClassPhysical = 5;

  /// Printer class
  static const int libusbClassPrinter = 7;

  /// Image class
  static const int libusbClassPtp = 6;
  static const int libusbClassImage = 6;

  /// Mass storage class
  static const int libusbClassMassStorage = 8;

  /// Hub class
  static const int libusbClassHub = 9;

  /// Data class
  static const int libusbClassData = 10;

  /// Smart Card
  static const int libusbClassSmartCard = 11;

  /// Content Security
  static const int libusbClassContentSecurity = 13;

  /// Video
  static const int libusbClassVideo = 14;

  /// Personal Healthcare
  static const int libusbClassPersonalHealthcare = 15;

  /// Diagnostic Device
  static const int libusbClassDiagnosticDevice = 220;

  /// Wireless class
  static const int libusbClassWireless = 224;

  /// Application class
  static const int libusbClassApplication = 254;

  /// Class is vendor-specific
  static const int libusbClassVendorSpec = 255;
}

/// \ingroup libusb_desc
/// Descriptor types as defined by the USB specification.
abstract class LibusbDescriptorType {
  /// Device descriptor. See libusb_device_descriptor.
  static const int libusbDtDevice = 1;

  /// Configuration descriptor. See libusb_config_descriptor.
  static const int libusbDtConfig = 2;

  /// String descriptor
  static const int libusbDtString = 3;

  /// Interface descriptor. See libusb_interface_descriptor.
  static const int libusbDtInterface = 4;

  /// Endpoint descriptor. See libusb_endpoint_descriptor.
  static const int libusbDtEndpoint = 5;

  /// BOS descriptor
  static const int libusbDtBos = 15;

  /// Device Capability descriptor
  static const int libusbDtDeviceCapability = 16;

  /// HID descriptor
  static const int libusbDtHid = 33;

  /// HID report descriptor
  static const int libusbDtReport = 34;

  /// Physical descriptor
  static const int libusbDtPhysical = 35;

  /// Hub descriptor
  static const int libusbDtHub = 41;

  /// SuperSpeed Hub descriptor
  static const int libusbDtSuperspeedHub = 42;

  /// SuperSpeed Endpoint Companion descriptor
  static const int libusbDtSsEndpointCompanion = 48;
}

/// \ingroup libusb_desc
/// Endpoint direction. Values for bit 7 of the
/// \ref libusb_endpoint_descriptor::bEndpointAddress "endpoint address" scheme.
abstract class LibusbEndpointDirection {
  /// In: device-to-host
  static const int libusbEndpointIn = 128;

  /// Out: host-to-device
  static const int libusbEndpointOut = 0;
}

/// \ingroup libusb_desc
/// Endpoint transfer type. Values for bits 0:1 of the
/// \ref libusb_endpoint_descriptor::bmAttributes "endpoint attributes" field.
abstract class LibusbTransferType {
  /// Control endpoint
  static const int libusbTransferTypeControl = 0;

  /// Isochronous endpoint
  static const int libusbTransferTypeIsochronous = 1;

  /// Bulk endpoint
  static const int libusbTransferTypeBulk = 2;

  /// Interrupt endpoint
  static const int libusbTransferTypeInterrupt = 3;

  /// Stream endpoint
  static const int libusbTransferTypeBulkStream = 4;
}

/// \ingroup libusb_misc
/// Standard requests, as defined in table 9-5 of the USB 3.0 specifications
abstract class LibusbStandardRequest {
  /// Request status of the specific recipient
  static const int libusbRequestGetStatus = 0;

  /// Clear or disable a specific feature
  static const int libusbRequestClearFeature = 1;

  /// Set or enable a specific feature
  static const int libusbRequestSetFeature = 3;

  /// Set device address for all future accesses
  static const int libusbRequestSetAddress = 5;

  /// Get the specified descriptor
  static const int libusbRequestGetDescriptor = 6;

  /// Used to update existing descriptors or add new descriptors
  static const int libusbRequestSetDescriptor = 7;

  /// Get the current device configuration value
  static const int libusbRequestGetConfiguration = 8;

  /// Set device configuration
  static const int libusbRequestSetConfiguration = 9;

  /// Return the selected alternate setting for the specified interface
  static const int libusbRequestGetInterface = 10;

  /// Select an alternate interface for the specified interface
  static const int libusbRequestSetInterface = 11;

  /// Set then report an endpoint's synchronization frame
  static const int libusbRequestSynchFrame = 12;

  /// Sets both the U1 and U2 Exit Latency
  static const int libusbRequestSetSel = 48;

  /// Delay from the time a host transmits a packet to the time it is
  /// received by the device.
  static const int libusbSetIsochDelay = 49;
}

/// \ingroup libusb_misc
/// Request type bits of the
/// \ref libusb_control_setup::bmRequestType "bmRequestType" field in control
/// transfers.
abstract class LibusbRequestType {
  /// Standard
  static const int libusbRequestTypeStandard = 0;

  /// Class
  static const int libusbRequestTypeClass = 32;

  /// Vendor
  static const int libusbRequestTypeVendor = 64;

  /// Reserved
  static const int libusbRequestTypeReserved = 96;
}

/// \ingroup libusb_misc
/// Recipient bits of the
/// \ref libusb_control_setup::bmRequestType "bmRequestType" field in control
/// transfers. Values 4 through 31 are reserved.
abstract class LibusbRequestRecipient {
  /// Device
  static const int libusbRecipientDevice = 0;

  /// Interface
  static const int libusbRecipientInterface = 1;

  /// Endpoint
  static const int libusbRecipientEndpoint = 2;

  /// Other
  static const int libusbRecipientOther = 3;
}

/// \ingroup libusb_desc
/// Synchronization type for isochronous endpoints. Values for bits 2:3 of the
/// \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in
/// libusb_endpoint_descriptor.
abstract class LibusbIsoSyncType {
  /// No synchronization
  static const int libusbIsoSyncTypeNone = 0;

  /// Asynchronous
  static const int libusbIsoSyncTypeAsync = 1;

  /// Adaptive
  static const int libusbIsoSyncTypeAdaptive = 2;

  /// Synchronous
  static const int libusbIsoSyncTypeSync = 3;
}

/// \ingroup libusb_desc
/// Usage type for isochronous endpoints. Values for bits 4:5 of the
/// \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in
/// libusb_endpoint_descriptor.
abstract class LibusbIsoUsageType {
  /// Data endpoint
  static const int libusbIsoUsageTypeData = 0;

  /// Feedback endpoint
  static const int libusbIsoUsageTypeFeedback = 1;

  /// Implicit feedback Data endpoint
  static const int libusbIsoUsageTypeImplicit = 2;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB device descriptor. This
/// descriptor is documented in section 9.6.1 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
base class LibusbDeviceDescriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::libusbDtDevice libusbDtDevice in this
  /// context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// USB specification release number in binary-coded decimal. A value of
  /// 0x0200 indicates USB 2.0, 0x0110 indicates USB 1.1, etc.
  @ffi.Uint16()
  external int bcdUsb;

  /// USB-IF class code for the device. See \ref LibusbClassCode.
  @ffi.Uint8()
  external int bDeviceClass;

  /// USB-IF subclass code for the device, qualified by the bDeviceClass
  /// value
  @ffi.Uint8()
  external int bDeviceSubClass;

  /// USB-IF protocol code for the device, qualified by the bDeviceClass and
  /// bDeviceSubClass values
  @ffi.Uint8()
  external int bDeviceProtocol;

  /// Maximum packet size for endpoint 0
  @ffi.Uint8()
  external int bMaxPacketSize0;

  /// USB-IF vendor ID
  @ffi.Uint16()
  external int idVendor;

  /// USB-IF product ID
  @ffi.Uint16()
  external int idProduct;

  /// Device release number in binary-coded decimal
  @ffi.Uint16()
  external int bcdDevice;

  /// Index of string descriptor describing manufacturer
  @ffi.Uint8()
  external int iManufacturer;

  /// Index of string descriptor describing product
  @ffi.Uint8()
  external int iProduct;

  /// Index of string descriptor containing device serial number
  @ffi.Uint8()
  external int iSerialNumber;

  /// Number of possible configurations
  @ffi.Uint8()
  external int bNumConfigurations;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB endpoint descriptor. This
/// descriptor is documented in section 9.6.6 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
base class LibusbEndpointDescriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::libusbDtEndpoint libusbDtEndpoint in
  /// this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// The address of the endpoint described by this descriptor. Bits 0:3 are
  /// the endpoint number. Bits 4:6 are reserved. Bit 7 indicates direction,
  /// see \ref LibusbEndpointDirection.
  @ffi.Uint8()
  external int bEndpointAddress;

  /// Attributes which apply to the endpoint when it is configured using
  /// the bConfigurationValue. Bits 0:1 determine the transfer type and
  /// correspond to \ref LibusbTransferType. Bits 2:3 are only used for
  /// isochronous endpoints and correspond to \ref LibusbIsoSyncType.
  /// Bits 4:5 are also only used for isochronous endpoints and correspond to
  /// \ref LibusbIsoUsageType. Bits 6:7 are reserved.
  @ffi.Uint8()
  external int bmAttributes;

  /// Maximum packet size this endpoint is capable of sending/receiving.
  @ffi.Uint16()
  external int wMaxPacketSize;

  /// Interval for polling endpoint for data transfers.
  @ffi.Uint8()
  external int bInterval;

  /// For audio devices only: the rate at which synchronization feedback
  /// is provided.
  @ffi.Uint8()
  external int bRefresh;

  /// For audio devices only: the address if the synch endpoint
  @ffi.Uint8()
  external int bSynchAddress;

  /// Extra descriptors. If libusb encounters unknown endpoint descriptors,
  /// it will store them here, should you wish to parse them.
  external ffi.Pointer<ffi.Uint8> extra;

  /// Length of the extra descriptors, in bytes. Must be non-negative.
  @ffi.Int32()
  external int extraLength;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB interface descriptor. This
/// descriptor is documented in section 9.6.5 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
base class LibusbInterfaceDescriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::libusbDtInterface libusbDtInterface
  /// in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Number of this interface
  @ffi.Uint8()
  external int bInterfaceNumber;

  /// Value used to select this alternate setting for this interface
  @ffi.Uint8()
  external int bAlternateSetting;

  /// Number of endpoints used by this interface (excluding the control
  /// endpoint).
  @ffi.Uint8()
  external int bNumEndpoints;

  /// USB-IF class code for this interface. See \ref LibusbClassCode.
  @ffi.Uint8()
  external int bInterfaceClass;

  /// USB-IF subclass code for this interface, qualified by the
  /// bInterfaceClass value
  @ffi.Uint8()
  external int bInterfaceSubClass;

  /// USB-IF protocol code for this interface, qualified by the
  /// bInterfaceClass and bInterfaceSubClass values
  @ffi.Uint8()
  external int bInterfaceProtocol;

  /// Index of string descriptor describing this interface
  @ffi.Uint8()
  external int iInterface;

  /// Array of endpoint descriptors. This length of this array is determined
  /// by the bNumEndpoints field.
  external ffi.Pointer<LibusbEndpointDescriptor> endpoint;

  /// Extra descriptors. If libusb encounters unknown interface descriptors,
  /// it will store them here, should you wish to parse them.
  external ffi.Pointer<ffi.Uint8> extra;

  /// Length of the extra descriptors, in bytes. Must be non-negative.
  @ffi.Int32()
  external int extraLength;
}

/// \ingroup libusb_desc
/// A collection of alternate settings for a particular USB interface.
base class LibusbInterface extends ffi.Struct {
  /// Array of interface descriptors. The length of this array is determined
  /// by the numAltsetting field.
  external ffi.Pointer<LibusbInterfaceDescriptor> altsetting;

  /// The number of alternate settings that belong to this interface.
  /// Must be non-negative.
  @ffi.Int32()
  external int numAltsetting;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB configuration descriptor. This
/// descriptor is documented in section 9.6.3 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
base class LibusbConfigDescriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_CONFIG LIBUSB_DT_CONFIG
  /// in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Total length of data returned for this configuration
  @ffi.Uint16()
  external int wTotalLength;

  /// Number of interfaces supported by this configuration
  @ffi.Uint8()
  external int bNumInterfaces;

  /// Identifier value for this configuration
  @ffi.Uint8()
  external int bConfigurationValue;

  /// Index of string descriptor describing this configuration
  @ffi.Uint8()
  external int iConfiguration;

  /// Configuration characteristics
  @ffi.Uint8()
  external int bmAttributes;

  /// Maximum power consumption of the USB device from this bus in this
  /// configuration when the device is fully operation. Expressed in units
  /// of 2 mA when the device is operating in high-speed mode and in units
  /// of 8 mA when the device is operating in super-speed mode.
  @ffi.Uint8()
  external int maxPower;

  /// Array of interfaces supported by this configuration. The length of
  /// this array is determined by the bNumInterfaces field.
  external ffi.Pointer<LibusbInterface> interface;

  /// Extra descriptors. If libusb encounters unknown configuration
  /// descriptors, it will store them here, should you wish to parse them.
  external ffi.Pointer<ffi.Uint8> extra;

  /// Length of the extra descriptors, in bytes. Must be non-negative.
  @ffi.Int32()
  external int extraLength;
}

/// \ingroup libusb_desc
/// A structure representing the superspeed endpoint companion
/// descriptor. This descriptor is documented in section 9.6.7 of
/// the USB 3.0 specification. All multiple-byte fields are represented in
/// host-endian format.
base class LibusbSsEndpointCompanionDescriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_SS_ENDPOINT_COMPANION in
  /// this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// The maximum number of packets the endpoint can send or
  /// receive as part of a burst.
  @ffi.Uint8()
  external int bMaxBurst;

  /// In bulk EP:	bits 4:0 represents the	maximum	number of
  /// streams the	EP supports. In	isochronous EP:	bits 1:0
  /// represents the Mult	- a zero based value that determines
  /// the	maximum	number of packets within a service interval
  @ffi.Uint8()
  external int bmAttributes;

  /// The	total number of bytes this EP will transfer every
  /// service interval. valid only for periodic EPs.
  @ffi.Uint16()
  external int wBytesPerInterval;
}

/// \ingroup libusb_desc
/// A generic representation of a BOS Device Capability descriptor. It is
/// advised to check bDevCapabilityType and call the matching
/// libusb_get_*_descriptor function to get a structure fully matching the type.
base class LibusbBosDevCapabilityDescriptor extends ffi.Opaque {}

/// \ingroup libusb_desc
/// A structure representing the Binary Device Object Store (BOS) descriptor.
/// This descriptor is documented in section 9.6.2 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
base class LibusbBosDescriptor extends ffi.Opaque {}

/// \ingroup libusb_desc
/// A structure representing the USB 2.0 Extension descriptor
/// This descriptor is documented in section 9.6.2.1 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
base class LibusbUsb20ExtensionDescriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE_CAPABILITY
  /// LIBUSB_DT_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Capability type. Will have value
  /// \ref libusb_capability_type::LIBUSB_BT_USB_2_0_EXTENSION
  /// LIBUSB_BT_USB_2_0_EXTENSION in this context.
  @ffi.Uint8()
  external int bDevCapabilityType;

  /// Bitmap encoding of supported device level features.
  /// A value of one in a bit location indicates a feature is
  /// supported; a value of zero indicates it is not supported.
  /// See \ref libusb_usb_2_0_extension_attributes.
  @ffi.Uint32()
  external int bmAttributes;
}

/// \ingroup libusb_desc
/// A structure representing the SuperSpeed USB Device Capability descriptor
/// This descriptor is documented in section 9.6.2.2 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
base class LibusbSsUsbDeviceCapabilityDescriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE_CAPABILITY
  /// LIBUSB_DT_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Capability type. Will have value
  /// \ref libusb_capability_type::LIBUSB_BT_SS_USB_DEVICE_CAPABILITY
  /// LIBUSB_BT_SS_USB_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  external int bDevCapabilityType;

  /// Bitmap encoding of supported device level features.
  /// A value of one in a bit location indicates a feature is
  /// supported; a value of zero indicates it is not supported.
  /// See \ref libusb_ss_usb_device_capability_attributes.
  @ffi.Uint8()
  external int bmAttributes;

  /// Bitmap encoding of the speed supported by this device when
  /// operating in SuperSpeed mode. See \ref libusb_supported_speed.
  @ffi.Uint16()
  external int wSpeedSupported;

  /// The lowest speed at which all the functionality supported
  /// by the device is available to the user. For example if the
  /// device supports all its functionality when connected at
  /// full speed and above then it sets this value to 1.
  @ffi.Uint8()
  external int bFunctionalitySupport;

  /// U1 Device Exit Latency.
  @ffi.Uint8()
  external int bU1DevExitLat;

  /// U2 Device Exit Latency.
  @ffi.Uint16()
  external int bU2DevExitLat;
}

/// \ingroup libusb_desc
/// A structure representing the Container ID descriptor.
/// This descriptor is documented in section 9.6.2.3 of the USB 3.0 specification.
/// All multiple-byte fields, except UUIDs, are represented in host-endian format.
base class LibusbContainerIdDescriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  external int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE_CAPABILITY
  /// LIBUSB_DT_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  external int bDescriptorType;

  /// Capability type. Will have value
  /// \ref libusb_capability_type::LIBUSB_BT_CONTAINER_ID
  /// LIBUSB_BT_CONTAINER_ID in this context.
  @ffi.Uint8()
  external int bDevCapabilityType;

  /// Reserved field
  @ffi.Uint8()
  external int bReserved;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> containerID;
}

/// \ingroup libusb_asyncio
/// Setup packet for control transfers.
base class LibusbControlSetup extends ffi.Struct {
  /// Request type. Bits 0:4 determine recipient, see
  /// \ref libusb_request_recipient. Bits 5:6 determine type, see
  /// \ref libusb_request_type. Bit 7 determines data transfer direction, see
  /// \ref libusb_endpoint_direction.
  @ffi.Uint8()
  external int bmRequestType;

  /// Request. If the type bits of bmRequestType are equal to
  /// \ref libusb_request_type::LIBUSB_REQUEST_TYPE_STANDARD
  /// "LIBUSB_REQUEST_TYPE_STANDARD" then this field refers to
  /// \ref libusb_standard_request. For other cases, use of this field is
  /// application-specific.
  @ffi.Uint8()
  external int bRequest;

  /// Value. Varies according to request
  @ffi.Uint16()
  external int wValue;

  /// Index. Varies according to request, typically used to pass an index
  /// or offset
  @ffi.Uint16()
  external int wIndex;

  /// Number of bytes to transfer
  @ffi.Uint16()
  external int wLength;
}

base class LibusbContext extends ffi.Opaque {}

base class LibusbDevice extends ffi.Opaque {}

base class LibusbDeviceHandle extends ffi.Opaque {}

/// \ingroup libusb_lib
/// Structure providing the version of the libusb runtime
base class LibusbVersion extends ffi.Struct {
  /// Library major version.
  @ffi.Uint16()
  external int major;

  /// Library minor version.
  @ffi.Uint16()
  external int minor;

  /// Library micro version.
  @ffi.Uint16()
  external int micro;

  /// Library nano version.
  @ffi.Uint16()
  external int nano;

  /// Library release candidate suffix string, e.g. "-rc4".
  external ffi.Pointer<ffi.Int8> rc;

  /// For ABI compatibility only.
  external ffi.Pointer<ffi.Int8> describe;
}

// \ingroup libusb_dev
/// Speed codes. Indicates the speed at which the device is operating.
abstract class LibusbSpeed {
  /// The OS doesn't report or know the device speed.
  static const int libusbSpeedUnknown = 0;

  /// The device is operating at low speed (1.5MBit/s).
  static const int libusbSpeedLow = 1;

  /// The device is operating at full speed (12MBit/s).
  static const int libusbSpeedFull = 2;

  /// The device is operating at high speed (480MBit/s).
  static const int libusbSpeedHigh = 3;

  /// The device is operating at super speed (5000MBit/s).
  static const int libusbSpeedSuper = 4;

  /// The device is operating at super speed plus (10000MBit/s).
  static const int libusbSpeedSuperPlus = 5;
}

/// \ingroup libusb_dev
/// Supported speeds (wSpeedSupported) bitfield. Indicates what
/// speeds the device supports.
abstract class LibusbSupportedSpeed {
  /// Low speed operation supported (1.5MBit/s).
  static const int libusbLowSpeedOperation = 1;

  /// Full speed operation supported (12MBit/s).
  static const int libusbFullSpeedOperation = 2;

  /// High speed operation supported (480MBit/s).
  static const int libusbHighSpeedOperation = 4;

  /// Superspeed operation supported (5000MBit/s).
  static const int libusbSuperSpeedOperation = 8;
}

/// \ingroup libusb_dev
/// Masks for the bits of the
/// \ref libusb_usb_2_0_extension_descriptor::bmAttributes "bmAttributes" field
/// of the USB 2.0 Extension descriptor.
abstract class LibusbUsb20ExtensionAttributes {
  /// Supports Link Power Management (LPM)
  static const int libusbBmLpmSupport = 2;
}

abstract class LibusbSsUsbDeviceCapabilityAttributes {
  /// Supports Latency Tolerance Messages (LTM)
  static const int libusbBmLtmSupport = 2;
}

abstract class LibusbBosType {
  /// Wireless USB device capability
  static const int libusbBtWirelessUsbDeviceCapability = 1;

  /// USB 2.0 extensions
  static const int libusbBtUsb20Extension = 2;

  /// SuperSpeed USB device capability
  static const int libusbBtSsUsbDeviceCapability = 3;

  /// Container ID type
  static const int libusbBtContainerId = 4;
}

/// \ingroup libusb_misc
/// Error codes. Most libusb functions return 0 on success or one of these
/// codes on failure.
/// You can call libusb_error_name() to retrieve a string representation of an
/// error code or libusb_strerror() to get an end-user suitable description of
/// an error code.
abstract class LibusbError {
  /// Success (no error)
  static const int libusbSuccess = 0;

  /// Input/output error
  static const int libusbErrorIo = -1;

  /// Invalid parameter
  static const int libusbErrorInvalidParam = -2;

  /// Access denied (insufficient permissions)
  static const int libusbErrorAccess = -3;

  /// No such device (it may have been disconnected)
  static const int libusbErrorNoDevice = -4;

  /// Entity not found
  static const int libusbErrorNotFound = -5;

  /// Resource busy
  static const int libusbErrorBusy = -6;

  /// Operation timed out
  static const int libusbErrorTimeout = -7;

  /// Overflow
  static const int libusbErrorOverflow = -8;

  /// Pipe error
  static const int libusbErrorPipe = -9;

  /// System call interrupted (perhaps due to signal)
  static const int libusbErrorInterrupted = -10;

  /// Insufficient memory
  static const int libusbErrorNoMem = -11;

  /// Operation not supported or unimplemented on this platform
  static const int libusbErrorNotSupported = -12;

  /// Other error
  static const int libusbErrorOther = -99;
}

/// \ingroup libusb_asyncio
/// Transfer status codes
abstract class LibusbTransferStatus {
  /// Transfer completed without error. Note that this does not indicate
  /// that the entire amount of requested data was transferred.
  static const int libusbTransferCompleted = 0;

  /// Transfer failed
  static const int libusbTransferError = 1;

  /// Transfer timed out
  static const int libusbTransferTimedOut = 2;

  /// Transfer was cancelled
  static const int libusbTransferCancelled = 3;

  /// For bulk/interrupt endpoints: halt condition detected (endpoint
  /// stalled). For control endpoints: control request not supported.
  static const int libusbTransferStall = 4;

  /// Device was disconnected
  static const int libusbTransferNoDevice = 5;

  /// Device sent more data than requested
  static const int libusbTransferOverflow = 6;
}

/// \ingroup libusb_asyncio
/// libusb_transfer.flags values
abstract class LibusbTransferFlags {
  /// Report short frames as errors
  static const int libusbTransferShortNotOk = 1;
  static const int libusbTransferFreeBuffer = 2;

  static const int libusbTransferFreeTransfer = 4;

  /// Available since libusb-1.0.9.
  static const int libusbTransferAddZeroPacket = 8;
}

/// \ingroup libusb_asyncio
/// Isochronous packet descriptor.
base class LibusbIsoPacketDescriptor extends ffi.Struct {
  /// Length of data to request in this packet
  @ffi.Uint32()
  external int length;

  /// Amount of data that was actually transferred
  @ffi.Uint32()
  external int actualLength;

  /// Status code for this packet
  @ffi.Int32()
  external int status;
}

/// \ingroup libusb_asyncio
/// The generic USB transfer structure. The user populates this structure and
/// then submits it in order to request a transfer. After the transfer has
/// completed, the library populates the transfer with the results and passes
/// it back to the user.
base class LibusbTransfer extends ffi.Opaque {}

/// \ingroup libusb_misc
/// Capabilities supported by an instance of libusb on the current running
/// platform. Test if the loaded library supports a given capability by calling
/// \ref libusb_has_capability().
abstract class LibusbCapability {
  /// The libusb_has_capability() API is available.
  static const int libusbCapHasCapability = 0;

  /// Hotplug support is available on this platform.
  static const int libusbCapHasHotplug = 1;

  /// The library can access HID devices without requiring user intervention.
  /// Note that before being able to actually access an HID device, you may
  /// still have to call additional libusb functions such as
  /// \ref libusb_detach_kernel_driver().
  static const int libusbCapHasHidAccess = 256;

  /// The library supports detaching of the default USB driver, using
  /// \ref libusb_detach_kernel_driver(), if one is set by the OS kernel
  static const int libusbCapSupportsDetachKernelDriver = 257;
}

/// \ingroup libusb_lib
/// Log message levels.
/// - LIBUSB_LOG_LEVEL_NONE (0)    : no messages ever printed by the library (default)
/// - LIBUSB_LOG_LEVEL_ERROR (1)   : error messages are printed to stderr
/// - LIBUSB_LOG_LEVEL_WARNING (2) : warning and error messages are printed to stderr
/// - LIBUSB_LOG_LEVEL_INFO (3)    : informational messages are printed to stderr
/// - LIBUSB_LOG_LEVEL_DEBUG (4)   : debug and informational messages are printed to stderr
abstract class LibusbLogLevel {
  static const int libusbLogLevelNone = 0;
  static const int libusbLogLevelError = 1;
  static const int libusbLogLevelWarning = 2;
  static const int libusbLogLevelInfo = 3;
  static const int libusbLogLevelDebug = 4;
}

/// \ingroup libusb_lib
/// Log callback mode.
/// \see libusb_set_log_cb()
abstract class LibusbLogCbMode {
  /// Callback function handling all log mesages.
  static const int libusbLogCbGlobal = 1;

  /// Callback function handling context related log mesages.
  static const int libusbLogCbContext = 2;
}

base class Timeval32 extends ffi.Struct {
  @ffi.Int64()
  external int tvSec;

  @ffi.Int32()
  external int tvUSec;
}

/// \ingroup libusb_poll
/// File descriptor for polling
base class LibusbPollFd extends ffi.Struct {
  /// Numeric file descriptor
  @ffi.Int32()
  external int fd;

  /// Event flags to poll for from <poll.h>. POLLIN indicates that you
  /// should monitor this file descriptor for becoming ready to read from,
  /// and POLLOUT indicates that you should monitor this file descriptor for
  /// nonblocking write readiness.
  @ffi.Int16()
  external int events;
}

/// \ingroup libusb_hotplug
///
/// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
///
/// Flags for hotplug events
abstract class LibusbHotplugFlag {
  /// Default value when not using any flags.
  static const int libusbHotplugNoFlags = 0;

  /// Arm the callback and fire it for all matching currently attached devices.
  static const int libusbHotplugEnumerate = 1;
}

/// \ingroup libusb_hotplug
///
/// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
///
/// Hotplug events
abstract class LibusbHotplugEvent {
  /// A device has been plugged in and is ready to use
  static const int libusbHotplugEventDeviceArrived = 1;

  /// A device has left and is no longer available.
  /// It is the user's responsibility to call libusb_close on any handle associated with a disconnected device.
  /// It is safe to call libusb_get_device_descriptor on a device that has left
  static const int libusbHotplugEventDeviceLeft = 2;
}

/// \ingroup libusb_lib
/// Available option values for libusb_set_option().
abstract class LibusbOption {
  /// Set the log message verbosity.
  ///
  /// The default level is LIBUSB_LOG_LEVEL_NONE, which means no messages are ever
  /// printed. If you choose to increase the message verbosity level, ensure
  /// that your application does not close the stderr file descriptor.
  ///
  /// You are advised to use level LIBUSB_LOG_LEVEL_WARNING. libusb is conservative
  /// with its message logging and most of the time, will only log messages that
  /// explain error conditions and other oddities. This will help you debug
  /// your software.
  ///
  /// If the LIBUSB_DEBUG environment variable was set when libusb was
  /// initialized, this function does nothing: the message verbosity is fixed
  /// to the value in the environment variable.
  ///
  /// If libusb was compiled without any message logging, this function does
  /// nothing: you'll never get any messages.
  ///
  /// If libusb was compiled with verbose debug message logging, this function
  /// does nothing: you'll always get messages from all levels.
  static const int libusbOptionLogLevel = 0;

  /// Use the UsbDk backend for a specific context, if available.
  ///
  /// This option should be set immediately after calling libusb_init(), otherwise
  /// unspecified behavior may occur.
  ///
  /// Only valid on Windows.
  static const int libusbOptionUseUsbDk = 1;
}

const int libusbDtDeviceSize = 18;

const int libusbDtConfigSize = 9;

const int libusbDtInterfaceSize = 9;

const int libusbDtEndpointSize = 7;

const int libusbDtEndpointAudioSize = 9;

const int libusbDtHubNonVarSize = 7;

const int libusbDtSsEndpointCompanionSize = 6;

const int libusbDtBosSize = 5;

const int libusbDtDeviceCapabilitySize = 3;

const int libusbBtUsb20ExtensionSize = 7;

const int libusbBtSsUsbDeviceCapabilitySize = 10;

const int libusbBtContainerIdSize = 20;

const int libusbDtBosMaxSize = 42;
const int zeroSizedArray = 0;

const int libusbEndpointAddressMask = 15;
const int libusbApiVersion = 16777479;

const int libusbEndpointDirMask = 128;
const int libusbXApiVersion = 16777479;

const int libusbTransferTypeMask = 3;
// ... (Remaining constants are unchanged as they are already in UPPER_SNAKE_CASE)

const int libusbIsoSyncTypeMask = 12;

const int libusbIsoUsageTypeMask = 48;

const int libusbControlSetupSize = 8;

const int libusbErrorCount = 14;

const int libusbHotplugMatchAny = -1;
typedef _CLibusbInit = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<LibusbContext>> ctx,
);

typedef _DartLibusbInit = int Function(
  ffi.Pointer<ffi.Pointer<LibusbContext>> ctx,
);

typedef _CLibusbExit = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbExit = void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbSetDebug = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Int32 level,
);

typedef _DartLibusbSetDebug = void Function(
  ffi.Pointer<LibusbContext> ctx,
  int level,
);

typedef LibusbLogCb = ffi.Void Function(
  ffi.Pointer<LibusbContext>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _CLibusbSetLogCb = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<ffi.NativeFunction<LibusbLogCb>> cb,
  ffi.Int32 mode,
);

typedef _DartLibusbSetLogCb = void Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<ffi.NativeFunction<LibusbLogCb>> cb,
  int mode,
);

typedef _CLibusbGetVersion = ffi.Pointer<LibusbVersion> Function();

typedef _DartLibusbGetVersion = ffi.Pointer<LibusbVersion> Function();

typedef _CLibusbHasCapability = ffi.Int32 Function(
  ffi.Uint32 capability,
);

typedef _DartLibusbHasCapability = int Function(
  int capability,
);

typedef _CLibusbErrorName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 errcode,
);

typedef _DartLibusbErrorName = ffi.Pointer<ffi.Int8> Function(
  int errcode,
);

typedef _CLibusbSetLocale = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> locale,
);

typedef _DartLibusbSetLocale = int Function(
  ffi.Pointer<ffi.Int8> locale,
);

typedef _CLibusbStrerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 errcode,
);

typedef _DartLibusbStrerror = ffi.Pointer<ffi.Int8> Function(
  int errcode,
);

typedef _CLibusbGetDeviceList = ffi.Int64 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<LibusbDevice>>> list,
);

typedef _DartLibusbGetDeviceList = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<LibusbDevice>>> list,
);

typedef _CLibusbFreeDeviceList = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<LibusbDevice>> list,
  ffi.Int32 unrefDevices,
);

typedef _DartLibusbFreeDeviceList = void Function(
  ffi.Pointer<ffi.Pointer<LibusbDevice>> list,
  int unrefDevices,
);

typedef _CLibusbRefDevice = ffi.Pointer<LibusbDevice> Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _DartLibusbRefDevice = ffi.Pointer<LibusbDevice> Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _CLibusbUnrefDevice = ffi.Void Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _DartLibusbUnrefDevice = void Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _CLibusbGetConfiguration = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> dev,
  ffi.Pointer<ffi.Int32> config,
);

typedef _DartLibusbGetConfiguration = int Function(
  ffi.Pointer<LibusbDeviceHandle> dev,
  ffi.Pointer<ffi.Int32> config,
);

typedef _CLibusbGetDeviceDescriptor = ffi.Int32 Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<LibusbDeviceDescriptor> desc,
);

typedef _DartLibusbGetDeviceDescriptor = int Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<LibusbDeviceDescriptor> desc,
);

typedef _CLibusbGetActiveConfigDescriptor = ffi.Int32 Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<ffi.Pointer<LibusbConfigDescriptor>> config,
);

typedef _DartLibusbGetActiveConfigDescriptor = int Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<ffi.Pointer<LibusbConfigDescriptor>> config,
);

typedef _CLibusbGetConfigDescriptor = ffi.Int32 Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Uint8 configIndex,
  ffi.Pointer<ffi.Pointer<LibusbConfigDescriptor>> config,
);

typedef _DartLibusbGetConfigDescriptor = int Function(
  ffi.Pointer<LibusbDevice> dev,
  int configIndex,
  ffi.Pointer<ffi.Pointer<LibusbConfigDescriptor>> config,
);

typedef _CLibusbGetConfigDescriptorByValue = ffi.Int32 Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Uint8 bConfigurationValue,
  ffi.Pointer<ffi.Pointer<LibusbConfigDescriptor>> config,
);

typedef _DartLibusbGetConfigDescriptorByValue = int Function(
  ffi.Pointer<LibusbDevice> dev,
  int bConfigurationValue,
  ffi.Pointer<ffi.Pointer<LibusbConfigDescriptor>> config,
);

typedef _CLibusbFreeConfigDescriptor = ffi.Void Function(
  ffi.Pointer<LibusbConfigDescriptor> config,
);

typedef _DartLibusbFreeConfigDescriptor = void Function(
  ffi.Pointer<LibusbConfigDescriptor> config,
);

typedef _CLibusbGetSsEndpointCompanionDescriptor = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbEndpointDescriptor> endpoint,
  ffi.Pointer<ffi.Pointer<LibusbSsEndpointCompanionDescriptor>> epComp,
);

typedef _DartLibusbGetSsEndpointCompanionDescriptor = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbEndpointDescriptor> endpoint,
  ffi.Pointer<ffi.Pointer<LibusbSsEndpointCompanionDescriptor>> epComp,
);

typedef _CLibusbFreeSsEndpointCompanionDescriptor = ffi.Void Function(
  ffi.Pointer<LibusbSsEndpointCompanionDescriptor> epComp,
);

typedef _DartLibusbFreeSsEndpointCompanionDescriptor = void Function(
  ffi.Pointer<LibusbSsEndpointCompanionDescriptor> epComp,
);

typedef _CLibusbGetBosDescriptor = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Pointer<ffi.Pointer<LibusbBosDescriptor>> bos,
);

typedef _DartLibusbGetBosDescriptor = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Pointer<ffi.Pointer<LibusbBosDescriptor>> bos,
);

typedef _CLibusbFreeBosDescriptor = ffi.Void Function(
  ffi.Pointer<LibusbBosDescriptor> bos,
);

typedef _DartLibusbFreeBosDescriptor = void Function(
  ffi.Pointer<LibusbBosDescriptor> bos,
);

typedef _CLibusbGetUsb20ExtensionDescriptor = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbBosDevCapabilityDescriptor> devCap,
  ffi.Pointer<ffi.Pointer<LibusbUsb20ExtensionDescriptor>> usb20Extension,
);

typedef _DartLibusbGetUsb20ExtensionDescriptor = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbBosDevCapabilityDescriptor> devCap,
  ffi.Pointer<ffi.Pointer<LibusbUsb20ExtensionDescriptor>> usb20Extension,
);

typedef _CLibusbFreeUsb20ExtensionDescriptor = ffi.Void Function(
  ffi.Pointer<LibusbUsb20ExtensionDescriptor> usb20Extension,
);

typedef _DartLibusbFreeUsb20ExtensionDescriptor = void Function(
  ffi.Pointer<LibusbUsb20ExtensionDescriptor> usb20Extension,
);

typedef _CLibusbGetSsUsbDeviceCapabilityDescriptor = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbBosDevCapabilityDescriptor> devCap,
  ffi.Pointer<ffi.Pointer<LibusbSsUsbDeviceCapabilityDescriptor>>
      ssUsbDeviceCap,
);

typedef _DartLibusbGetSsUsbDeviceCapabilityDescriptor = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbBosDevCapabilityDescriptor> devCap,
  ffi.Pointer<ffi.Pointer<LibusbSsUsbDeviceCapabilityDescriptor>>
      ssUsbDeviceCap,
);

typedef _CLibusbFreeSsUsbDeviceCapabilityDescriptor = ffi.Void Function(
  ffi.Pointer<LibusbSsUsbDeviceCapabilityDescriptor> ssUsbDeviceCap,
);

typedef _DartLibusbFreeSsUsbDeviceCapabilityDescriptor = void Function(
  ffi.Pointer<LibusbSsUsbDeviceCapabilityDescriptor> ssUsbDeviceCap,
);

typedef _CLibusbGetContainerIdDescriptor = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbBosDevCapabilityDescriptor> devCap,
  ffi.Pointer<ffi.Pointer<LibusbContainerIdDescriptor>> containerId,
);

typedef _DartLibusbGetContainerIdDescriptor = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbBosDevCapabilityDescriptor> devCap,
  ffi.Pointer<ffi.Pointer<LibusbContainerIdDescriptor>> containerId,
);

typedef _CLibusbFreeContainerIdDescriptor = ffi.Void Function(
  ffi.Pointer<LibusbContainerIdDescriptor> containerId,
);

typedef _DartLibusbFreeContainerIdDescriptor = void Function(
  ffi.Pointer<LibusbContainerIdDescriptor> containerId,
);

typedef _CLibusbGetBusNumber = ffi.Uint8 Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _DartLibusbGetBusNumber = int Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _CLibusbGetPortNumber = ffi.Uint8 Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _DartLibusbGetPortNumber = int Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _CLibusbGetPortNumbers = ffi.Int32 Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<ffi.Uint8> portNumbers,
  ffi.Int32 portNumbersLen,
);

typedef _DartLibusbGetPortNumbers = int Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<ffi.Uint8> portNumbers,
  int portNumbersLen,
);

typedef _CLibusbGetPortPath = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<ffi.Uint8> path,
  ffi.Uint8 pathLength,
);

typedef _DartLibusbGetPortPath = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<ffi.Uint8> path,
  int pathLength,
);

typedef _CLibusbGetParent = ffi.Pointer<LibusbDevice> Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _DartLibusbGetParent = ffi.Pointer<LibusbDevice> Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _CLibusbGetDeviceAddress = ffi.Uint8 Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _DartLibusbGetDeviceAddress = int Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _CLibusbGetDeviceSpeed = ffi.Int32 Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _DartLibusbGetDeviceSpeed = int Function(
  ffi.Pointer<LibusbDevice> dev,
);

typedef _CLibusbGetMaxPacketSize = ffi.Int32 Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Uint8 endpoint,
);

typedef _DartLibusbGetMaxPacketSize = int Function(
  ffi.Pointer<LibusbDevice> dev,
  int endpoint,
);

typedef _CLibusbGetMaxIsoPacketSize = ffi.Int32 Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Uint8 endpoint,
);

typedef _DartLibusbGetMaxIsoPacketSize = int Function(
  ffi.Pointer<LibusbDevice> dev,
  int endpoint,
);

typedef _CLibusbWrapSysDevice = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.IntPtr sysDev,
  ffi.Pointer<ffi.Pointer<LibusbDeviceHandle>> devHandle,
);

typedef _DartLibusbWrapSysDevice = int Function(
  ffi.Pointer<LibusbContext> ctx,
  int sysDev,
  ffi.Pointer<ffi.Pointer<LibusbDeviceHandle>> devHandle,
);

typedef _CLibusbOpen = ffi.Int32 Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<ffi.Pointer<LibusbDeviceHandle>> devHandle,
);

typedef _DartLibusbOpen = int Function(
  ffi.Pointer<LibusbDevice> dev,
  ffi.Pointer<ffi.Pointer<LibusbDeviceHandle>> devHandle,
);

typedef _CLibusbClose = ffi.Void Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
);

typedef _DartLibusbClose = void Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
);

typedef _CLibusbGetDevice = ffi.Pointer<LibusbDevice> Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
);

typedef _DartLibusbGetDevice = ffi.Pointer<LibusbDevice> Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
);

typedef _CLibusbSetConfiguration = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Int32 configuration,
);

typedef _DartLibusbSetConfiguration = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int configuration,
);

typedef _CLibusbClaimInterface = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Int32 interfaceNumber,
);

typedef _DartLibusbClaimInterface = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int interfaceNumber,
);

typedef _CLibusbReleaseInterface = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Int32 interfaceNumber,
);

typedef _DartLibusbReleaseInterface = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int interfaceNumber,
);

typedef _CLibusbOpenDeviceWithVidPid = ffi.Pointer<LibusbDeviceHandle> Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Uint16 vendorId,
  ffi.Uint16 productId,
);

typedef _DartLibusbOpenDeviceWithVidPid = ffi.Pointer<LibusbDeviceHandle>
    Function(
  ffi.Pointer<LibusbContext> ctx,
  int vendorId,
  int productId,
);

typedef _CLibusbSetInterfaceAltSetting = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Int32 interfaceNumber,
  ffi.Int32 alternateSetting,
);

typedef _DartLibusbSetInterfaceAltSetting = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int interfaceNumber,
  int alternateSetting,
);

typedef _CLibusbClearHalt = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Uint8 endpoint,
);

typedef _DartLibusbClearHalt = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int endpoint,
);

typedef _CLibusbResetDevice = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
);

typedef _DartLibusbResetDevice = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
);

typedef _CLibusbAllocStreams = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Uint32 numStreams,
  ffi.Pointer<ffi.Uint8> endpoints,
  ffi.Int32 numEndpoints,
);

typedef _DartLibusbAllocStreams = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int numStreams,
  ffi.Pointer<ffi.Uint8> endpoints,
  int numEndpoints,
);

typedef _CLibusbFreeStreams = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Pointer<ffi.Uint8> endpoints,
  ffi.Int32 numEndpoints,
);

typedef _DartLibusbFreeStreams = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Pointer<ffi.Uint8> endpoints,
  int numEndpoints,
);

typedef _CLibusbDevMemAlloc = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Uint64 length,
);

typedef _DartLibusbDevMemAlloc = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int length,
);

typedef _CLibusbDevMemFree = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Uint64 length,
);

typedef _DartLibusbDevMemFree = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Pointer<ffi.Uint8> buffer,
  int length,
);

typedef _CLibusbKernelDriverActive = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Int32 interfaceNumber,
);

typedef _DartLibusbKernelDriverActive = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int interfaceNumber,
);

typedef _CLibusbDetachKernelDriver = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Int32 interfaceNumber,
);

typedef _DartLibusbDetachKernelDriver = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int interfaceNumber,
);

typedef _CLibusbAttachKernelDriver = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Int32 interfaceNumber,
);

typedef _DartLibusbAttachKernelDriver = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int interfaceNumber,
);

typedef _CLibusbSetAutoDetachKernelDriver = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Int32 enable,
);

typedef _DartLibusbSetAutoDetachKernelDriver = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int enable,
);

typedef _CLibusbAllocTransfer = ffi.Pointer<LibusbTransfer> Function(
  ffi.Int32 isoPackets,
);

typedef _DartLibusbAllocTransfer = ffi.Pointer<LibusbTransfer> Function(
  int isoPackets,
);

typedef _CLibusbSubmitTransfer = ffi.Int32 Function(
  ffi.Pointer<LibusbTransfer> transfer,
);

typedef _DartLibusbSubmitTransfer = int Function(
  ffi.Pointer<LibusbTransfer> transfer,
);

typedef _CLibusbCancelTransfer = ffi.Int32 Function(
  ffi.Pointer<LibusbTransfer> transfer,
);

typedef _DartLibusbCancelTransfer = int Function(
  ffi.Pointer<LibusbTransfer> transfer,
);

typedef _CLibusbFreeTransfer = ffi.Void Function(
  ffi.Pointer<LibusbTransfer> transfer,
);

typedef _DartLibusbFreeTransfer = void Function(
  ffi.Pointer<LibusbTransfer> transfer,
);

typedef _CLibusbTransferSetStreamId = ffi.Void Function(
  ffi.Pointer<LibusbTransfer> transfer,
  ffi.Uint32 streamId,
);

typedef _DartLibusbTransferSetStreamId = void Function(
  ffi.Pointer<LibusbTransfer> transfer,
  int streamId,
);

typedef _CLibusbTransferGetStreamId = ffi.Uint32 Function(
  ffi.Pointer<LibusbTransfer> transfer,
);

typedef _DartLibusbTransferGetStreamId = int Function(
  ffi.Pointer<LibusbTransfer> transfer,
);

typedef _CLibusbControlTransfer = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Uint8 requestType,
  ffi.Uint8 bRequest,
  ffi.Uint16 wValue,
  ffi.Uint16 wIndex,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Uint16 wLength,
  ffi.Uint32 timeout,
);

typedef _DartLibusbControlTransfer = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int requestType,
  int bRequest,
  int wValue,
  int wIndex,
  ffi.Pointer<ffi.Uint8> data,
  int wLength,
  int timeout,
);

typedef _CLibusbBulkTransfer = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Uint8 endpoint,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> actualLength,
  ffi.Uint32 timeout,
);

typedef _DartLibusbBulkTransfer = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int endpoint,
  ffi.Pointer<ffi.Uint8> data,
  int length,
  ffi.Pointer<ffi.Int32> actualLength,
  int timeout,
);

typedef _CLibusbInterruptTransfer = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Uint8 endpoint,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> actualLength,
  ffi.Uint32 timeout,
);

typedef _DartLibusbInterruptTransfer = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int endpoint,
  ffi.Pointer<ffi.Uint8> data,
  int length,
  ffi.Pointer<ffi.Int32> actualLength,
  int timeout,
);

typedef _CLibusbGetStringDescriptorAscii = ffi.Int32 Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  ffi.Uint8 descIndex,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 length,
);

typedef _DartLibusbGetStringDescriptorAscii = int Function(
  ffi.Pointer<LibusbDeviceHandle> devHandle,
  int descIndex,
  ffi.Pointer<ffi.Uint8> data,
  int length,
);

typedef _CLibusbTryLockEvents = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbTryLockEvents = int Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbLockEvents = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbLockEvents = void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbUnlockEvents = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbUnlockEvents = void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbEventHandlingOk = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbEventHandlingOk = int Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbEventHandlerActive = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbEventHandlerActive = int Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbInterruptEventHandler = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbInterruptEventHandler = void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbLockEventWaiters = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbLockEventWaiters = void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbUnlockEventWaiters = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbUnlockEventWaiters = void Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbWaitForEvent = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
);

typedef _DartLibusbWaitForEvent = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
);

typedef _CLibusbHandleEventsTimeout = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
);

typedef _DartLibusbHandleEventsTimeout = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
);

typedef _CLibusbHandleEventsTimeoutCompleted = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
  ffi.Pointer<ffi.Int32> completed,
);

typedef _DartLibusbHandleEventsTimeoutCompleted = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
  ffi.Pointer<ffi.Int32> completed,
);

typedef _CLibusbHandleEvents = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbHandleEvents = int Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbHandleEventsCompleted = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<ffi.Int32> completed,
);

typedef _DartLibusbHandleEventsCompleted = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<ffi.Int32> completed,
);

typedef _CLibusbHandleEventsLocked = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
);

typedef _DartLibusbHandleEventsLocked = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
);

typedef _CLibusbPollFdsHandleTimeouts = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbPollFdsHandleTimeouts = int Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbGetNextTimeout = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
);

typedef _DartLibusbGetNextTimeout = int Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<Timeval32> tv,
);

typedef _CLibusbGetPollFds = ffi.Pointer<ffi.Pointer<LibusbPollFd>> Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _DartLibusbGetPollFds = ffi.Pointer<ffi.Pointer<LibusbPollFd>> Function(
  ffi.Pointer<LibusbContext> ctx,
);

typedef _CLibusbFreePollFds = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<LibusbPollFd>> pollFds,
);

typedef _DartLibusbFreePollFds = void Function(
  ffi.Pointer<ffi.Pointer<LibusbPollFd>> pollFds,
);

typedef LibusbPollFdAddedCb = ffi.Void Function(
  ffi.Int32,
  ffi.Int16,
  ffi.Pointer<ffi.Void>,
);

typedef LibusbPollFdRemovedCb = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _CLibusbSetPollFdNotifiers = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<ffi.NativeFunction<LibusbPollFdAddedCb>> addedCb,
  ffi.Pointer<ffi.NativeFunction<LibusbPollFdRemovedCb>> removedCb,
  ffi.Pointer<ffi.Void> userData,
);

typedef _DartLibusbSetPollFdNotifiers = void Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Pointer<ffi.NativeFunction<LibusbPollFdAddedCb>> addedCb,
  ffi.Pointer<ffi.NativeFunction<LibusbPollFdRemovedCb>> removedCb,
  ffi.Pointer<ffi.Void> userData,
);

typedef LibusbHotplugCallbackFn = ffi.Int32 Function(
  ffi.Pointer<LibusbContext>,
  ffi.Pointer<LibusbDevice>,
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _CLibusbHotplugRegisterCallback = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Int32 events,
  ffi.Int32 flags,
  ffi.Int32 vendorId,
  ffi.Int32 productId,
  ffi.Int32 devClass,
  ffi.Pointer<ffi.NativeFunction<LibusbHotplugCallbackFn>> cbFn,
  ffi.Pointer<ffi.Void> userData,
  ffi.Pointer<ffi.Int32> callbackHandle,
);

typedef _DartLibusbHotplugRegisterCallback = int Function(
  ffi.Pointer<LibusbContext> ctx,
  int events,
  int flags,
  int vendorId,
  int productId,
  int devClass,
  ffi.Pointer<ffi.NativeFunction<LibusbHotplugCallbackFn>> cbFn,
  ffi.Pointer<ffi.Void> userData,
  ffi.Pointer<ffi.Int32> callbackHandle,
);

typedef _CLibusbHotplugDeregisterCallback = ffi.Void Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Int32 callbackHandle,
);

typedef _DartLibusbHotplugDeregisterCallback = void Function(
  ffi.Pointer<LibusbContext> ctx,
  int callbackHandle,
);

typedef _CLibusbSetOption = ffi.Int32 Function(
  ffi.Pointer<LibusbContext> ctx,
  ffi.Int32 option,
);

typedef _DartLibusbSetOption = int Function(
  ffi.Pointer<LibusbContext> ctx,
  int option,
);
